 upload.any()(req, res, async (error) => {
    if (error) {
      return res.status(500).json({ message: error.message });
    }

    if (!req.files || req.files.length === 0) {
      return res.status(400).send('File tidak ditemukan.');
    }

    try {
      const uploadedMedia = [];

      for (const file of req.files) {
        const media_uuid = uuidv4(); // UUID unik untuk setiap file
        const extensi = path.extname(file.originalname); // Ekstensi file
        const size = file.size; // Ukuran file dalam bytes

        // Menentukan subdirektori berdasarkan mimetype
        let subdir = '';
        if (file.mimetype.includes('image')) {
          subdir = 'img';
        } else if (file.mimetype.includes('pdf')) {
          subdir = 'pdf';
        } else if (file.mimetype.includes('word') || file.mimetype.includes('office')) {
          subdir = 'doc';
        } else if (file.mimetype.includes('video')) {
          subdir = 'video';
        } else if (file.mimetype.includes('excel')) {
          subdir = 'excel';
        }

        // Pastikan subdirektori tidak kosong
        if (!subdir) {
          return res.status(400).send('Tipe file tidak didukung.');
        }

        // URL file (sesuaikan sesuai setup server Anda)
        const url = `${req.protocol}://${req.get('host')}/uploads/${subdir}/${file.filename}`;

        const newMedia = await tbl_media.create({
          media_uuid: media_uuid,
          // Sesuaikan field 'media_uuid_table' dan 'media_table' dengan data yang relevan dari request Anda
          media_uuid_table: null,
          media_table: null,
          media_name: file.originalname,
          media_hash_name: file.filename,
          media_category: subdir, // kategori berdasarkan subdirektori
          media_extensi: extensi.slice(1), // menghapus titik di depan ekstensi
          media_size: size.toString(),
          media_url: url,
          // Tambahkan atau sesuaikan field lain jika diperlukan
          media_metadata: JSON.stringify({ originalname: file.originalname, mimetype: file.mimetype }), // contoh sederhana metadata
        });

        uploadedMedia.push(newMedia);
      }

      res.status(200).json({
        message: 'File berhasil diupload',
        data: uploadedMedia,
      });
    } catch (dbError) {
      res.status(500).json({ message: dbError.message });
    }
  });